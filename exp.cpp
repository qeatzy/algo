// exp.cpp, exponential partition, see also " sqrt.cpp
// Sparse Table (ST) algorithm A better approach is to preprocess RMQ for sub arrays of length 2k using dynamic programming. We will keep an array M[0, N-1][0, logN] where M[i][j] is the index of the minimum value in the sub array starting at i having length 2j.   So, the overall complexity of the algorithm is <O(N logN), O(1)>.   https://www.topcoder.com/community/data-science/data-science-tutorials/range-minimum-query-and-lowest-common-ancestor/#Segment_Trees
// Sparse Table The main problem that we can solve is RMQ problem or LCA problem. The main idea of Sparse Table, is to keep the value for each interval of length 2^k (for each k).  So preprocess will be in O(n.log(n)) and query will be in O(1)   Problems: Strip, GCDSSQ, LCM Query.  http://codeforces.com/blog/entry/15729
